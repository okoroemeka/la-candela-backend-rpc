// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: service_la_candela_rpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LaCandelaBackendRPCClient is the client API for LaCandelaBackendRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LaCandelaBackendRPCClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error)
	GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseResponse, error)
}

type laCandelaBackendRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewLaCandelaBackendRPCClient(cc grpc.ClientConnInterface) LaCandelaBackendRPCClient {
	return &laCandelaBackendRPCClient{cc}
}

func (c *laCandelaBackendRPCClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/pb.LaCandelaBackendRPC/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laCandelaBackendRPCClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, "/pb.LaCandelaBackendRPC/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laCandelaBackendRPCClient) CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error) {
	out := new(CreateCourseResponse)
	err := c.cc.Invoke(ctx, "/pb.LaCandelaBackendRPC/CreateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laCandelaBackendRPCClient) GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseResponse, error) {
	out := new(GetCourseResponse)
	err := c.cc.Invoke(ctx, "/pb.LaCandelaBackendRPC/GetCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LaCandelaBackendRPCServer is the server API for LaCandelaBackendRPC service.
// All implementations must embed UnimplementedLaCandelaBackendRPCServer
// for forward compatibility
type LaCandelaBackendRPCServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error)
	GetCourse(context.Context, *GetCourseRequest) (*GetCourseResponse, error)
	mustEmbedUnimplementedLaCandelaBackendRPCServer()
}

// UnimplementedLaCandelaBackendRPCServer must be embedded to have forward compatible implementations.
type UnimplementedLaCandelaBackendRPCServer struct {
}

func (UnimplementedLaCandelaBackendRPCServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedLaCandelaBackendRPCServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedLaCandelaBackendRPCServer) CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourse not implemented")
}
func (UnimplementedLaCandelaBackendRPCServer) GetCourse(context.Context, *GetCourseRequest) (*GetCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourse not implemented")
}
func (UnimplementedLaCandelaBackendRPCServer) mustEmbedUnimplementedLaCandelaBackendRPCServer() {}

// UnsafeLaCandelaBackendRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LaCandelaBackendRPCServer will
// result in compilation errors.
type UnsafeLaCandelaBackendRPCServer interface {
	mustEmbedUnimplementedLaCandelaBackendRPCServer()
}

func RegisterLaCandelaBackendRPCServer(s grpc.ServiceRegistrar, srv LaCandelaBackendRPCServer) {
	s.RegisterService(&LaCandelaBackendRPC_ServiceDesc, srv)
}

func _LaCandelaBackendRPC_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaCandelaBackendRPCServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LaCandelaBackendRPC/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaCandelaBackendRPCServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaCandelaBackendRPC_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaCandelaBackendRPCServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LaCandelaBackendRPC/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaCandelaBackendRPCServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaCandelaBackendRPC_CreateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaCandelaBackendRPCServer).CreateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LaCandelaBackendRPC/CreateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaCandelaBackendRPCServer).CreateCourse(ctx, req.(*CreateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaCandelaBackendRPC_GetCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaCandelaBackendRPCServer).GetCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LaCandelaBackendRPC/GetCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaCandelaBackendRPCServer).GetCourse(ctx, req.(*GetCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LaCandelaBackendRPC_ServiceDesc is the grpc.ServiceDesc for LaCandelaBackendRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LaCandelaBackendRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LaCandelaBackendRPC",
	HandlerType: (*LaCandelaBackendRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _LaCandelaBackendRPC_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _LaCandelaBackendRPC_LoginUser_Handler,
		},
		{
			MethodName: "CreateCourse",
			Handler:    _LaCandelaBackendRPC_CreateCourse_Handler,
		},
		{
			MethodName: "GetCourse",
			Handler:    _LaCandelaBackendRPC_GetCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_la_candela_rpc.proto",
}
